{   
    "lex": {
        "macros": {
            "Letter": "[a-zA-Z]",
            "Digit" : "[0-9]",
            "NonZeroDigit" : "[1-9]",
        },
        
        "rules": [
            ["/\\*(.|\\n|\\r|\\r\\n)*?\\*/",    "/* skip */"],
            ["//.*",                            "/* skip */"],
            ["\\s+",                            "/* skip */"],
            ["class\\b",                        "return 'class';"],
            ["public\\b",                       "return 'public';"],
            ["static\\b",                       "return 'static';"],
            ["void\\b",                         "return 'void';"],
            ["main\\b",                         "return 'main';"],
            ["String\\b",                       "return 'String';"],
            ["extends\\b",                      "return 'extends';"],
            ["int\\b",                          "return 'int';"],
            ["boolean\\b",                      "return 'boolean';"],
            ["return\\b",                       "return 'return';"],
            ["if\\b",                           "return 'if';"],
            ["else\\b",                         "return 'else';"],
            ["while\\b",                        "return 'while';"],
            ["true\\b",                         "return 'true';"],
            ["System\\.out\\.println\\b",       "return 'printLine';"],
            ["new\\b",                          "return 'new';"],
            ["null\\b",                         "return 'null';"],
            ["false\\b",                        "return 'false';"],
            ["this\\b",                         "return 'this';"],
            ["{Letter}({Letter}|{Digit})*",     "return 'ID';"],
            ["({NonZeroDigit}{Digit}*|0)",      "return 'Integer';"],
            ["\\!=",                            "return '!=';"],
            ["\\!",                             "return '!';"],
            ["-",                               "return '-';"],
            ["\\+",                             "return '+';"],
            ["\\*",                             "return '*';"],
            ["&&",                              "return '&&';"],
            ["\\/",                             "return '/';"],
            [">=",                              "return '>=';"],
            [">",                               "return '>';"],
            ["<=",                              "return '<=';"],
            ["<",                               "return '<';"],
            ["==",                              "return '==';"],
            ["\\|\\|",                          "return '||';"],
            ["\\{",                             "return '{';"],
            ["\\}",                             "return '}';"],
            ["\\[",                             "return '[';"],
            ["\\]",                             "return ']';"],
            ["\\(",                             "return '(';"],
            ["\\)",                             "return ')';"],
            ["\\.",                             "return '.';"],
            [";",                               "return ';';"],
            [",",                               "return ',';"],
            ["=",                               "return '=';"],
        ]
    },
    
    "operators": [
        ["right", "="],
        ["left", "||"],
        ["left", "&&"],
        ["nonassoc", "==", "!="],
        ["left", "<", "<=", ">", ">="],
        ["left", "+", "-"],
        ["left", "*", "/"],
        ["right", "!", "UMINUS", "."],
    ],

    "bnf": { 
        "Program":          [
                                ["MainClassDecl ClassDeclList", "ParsedProductions.push('<Program> ::= <MainClassDecl> <ClassDeclList>');"]
                            ],
        "MainClassDecl":    [
                                ["class ID { public static void main ( String [ ] ID ) { StmtList } }", "ParsedProductions.push('<MainClassDecl> ::= class ID { public static void main ( String [ ] ID ) { <StmtList> } }');"]
                            ],
        "ClassDeclList":    [
                                ["", "ParsedProductions.push('<ClassDeclList> ::= epsilon');"],
                                ["ClassDecl ClassDeclList", "ParsedProductions.push('<ClassDeclList> ::= <ClassDecl> <ClassDeclList>');"]
                            ],
        "ClassDecl":        [
                                ["class ID Extension { ClassVarDeclList MethodDeclList }", "ParsedProductions.push('<ClassDecl> ::= class ID <Extension> { <ClassVarDeclList> <MethodDeclList> }');"]
                            ],
        "Extension":        [
                                ["", "ParsedProductions.push('<Extension> ::= epsilon');"],
                                ["extends ID", "ParsedProductions.push('<Extension> ::= extends ID');"]
                            ],
        "ClassVarDeclList": [
                                ["", "ParsedProductions.push('<ClassVarDeclList> ::= epsilon');"],
                                ["ClassVarDecl ClassVarDeclList", "ParsedProductions.push('<ClassVarDeclList> ::= <ClassVarDecl> <ClassVarDeclList>');"]
                            ],
        "ClassVarDecl":     [
                                ["Type ID ;", "ParsedProductions.push('<ClassVarDecl> ::= <Type> ID');"]
                            ],
        "MethodDeclList":   [
                                ["", "ParsedProductions.push('<MethodDeclList> ::= epsilon');"],
                                ["MethodDecl MethodDeclList", "ParsedProductions.push('<MethodDeclList> ::= <MethodDecl> <MethodDeclList>');"]
                            ],
        "MethodDecl":       [
                                ["public Type ID ( FormalList ) { StmtList return Expr ; }", "ParsedProductions.push('<MethodDecl> ::= public <Type> ID ( <FormalList> ) { <StmtList> return <Expr> ; }');"]
                            ],
        "FormalList":       [
                                ["", "ParsedProductions.push('<FormalList> ::= epsilon');"],
                                ["Formal FormalList_", "ParsedProductions.push('<FormalList> ::= <Formal> <FormalList_>');"]
                            ],
        "FormalList_":      [
                                ["", "ParsedProductions.push('<FormalList_> ::= epsilon');"],
                                [", Formal FormalList_", "ParsedProductions.push('<FormalList_> ::= , <Formal> <FormalList_>');"]
                            ],
        "Formal":           [
                                ["Type ID", "ParsedProductions.push('<Formal> ::= <Type> ID');"]
                            ],
        "Type":             [
                                ["int", "ParsedProductions.push('<Type> ::= int');"],
                                ["boolean", "ParsedProductions.push('<Type> ::= boolean');"],
                                ["ID", "ParsedProductions.push('<Type> ::= ID');"]
                            ],
        "StmtList":         [
                                ["", "ParsedProductions.push('<StmtList> ::= epsilon');"],
                                ["Stmt StmtList", "ParsedProductions.push('<StmtList> ::= <Stmt> <StmtList>');"]
                            ],
        "Stmt":             [
                                ["Type ID = Expr ;", "ParsedProductions.push('<Stmt> ::= <Type> ID = <Expr> ;');"],
                                ["{ StmtList }", "ParsedProductions.push('<Stmt> ::= { <StmtList> }');"],
                                ["if ( Expr ) Stmt else Stmt", "ParsedProductions.push('<Stmt> ::= if ( <Expr> ) <Stmt> else <Stmt>');"],
                                ["while ( Expr ) Stmt", "ParsedProductions.push('<Stmt> ::= while ( <Expr> ) <Stmt>');"],
                                ["printLine ( Expr ) ;", "ParsedProductions.push('<Stmt> ::= ' + $1 + ' ( <Expr> )');"],
                                ["ID = Expr ;", "ParsedProductions.push('<Stmt> ::= ID = <Expr>');"]
                            ],
        "Expr":             [
                                ["Expr + Expr", "ParsedProductions.push('<Expr> ::= <Expr> + <Expr>');"],
                                ["Expr - Expr", "ParsedProductions.push('<Expr> ::= <Expr> - <Expr>');"],
                                ["Expr * Expr", "ParsedProductions.push('<Expr> ::= <Expr> * <Expr>');"],
                                ["Expr / Expr", "ParsedProductions.push('<Expr> ::= <Expr> / <Expr>');"],
                                ["Expr < Expr", "ParsedProductions.push('<Expr> ::= <Expr> < <Expr>');"],
                                ["Expr <= Expr", "ParsedProductions.push('<Expr> ::= <Expr> <= <Expr>');"],
                                ["Expr >= Expr", "ParsedProductions.push('<Expr> ::= <Expr> >= <Expr>');"],
                                ["Expr > Expr", "ParsedProductions.push('<Expr> ::= <Expr> > <Expr>');"],
                                ["Expr == Expr", "ParsedProductions.push('<Expr> ::= <Expr> == <Expr>');"],
                                ["Expr != Expr", "ParsedProductions.push('<Expr> ::= <Expr> != <Expr>');"],
                                ["Expr && Expr", "ParsedProductions.push('<Expr> ::= <Expr> && <Expr>');"],
                                ["Expr || Expr", "ParsedProductions.push('<Expr> ::= <Expr> || <Expr>');"],
                                ["! Expr", "ParsedProductions.push('<Expr> ::= ! <Expr>');"],
                                ["- Expr", "ParsedProductions.push('<Expr> ::= - <Expr>');", {"prec": "UMINUS"}],
                                ["Expr . ID ( ParameterList )", "ParsedProductions.push('<Expr> ::= <Expr> . ID ( <ParameterList> )');"],
                                ["new ID ( )", "ParsedProductions.push('<Expr> ::= new ID ( )');"],
                                ["ID", "ParsedProductions.push('<Expr> ::= ID');"],
                                ["this", "ParsedProductions.push('<Expr> ::= this');"],
                                ["Integer", "ParsedProductions.push('<Expr> ::= Integer');"],
                                ["null", "ParsedProductions.push('<Expr> ::= null');"],
                                ["true", "ParsedProductions.push('<Expr> ::= true');"],
                                ["false", "ParsedProductions.push('<Expr> ::= false');"], 
                                ["( Expr )", "ParsedProductions.push('<Expr> ::= ( <Expr> )');"]
                            ],
        "ParameterList":    [
                                ["", "ParsedProductions.push('<ParameterList> ::= epsilon');"],
                                ["Expr ParameterList_", "ParsedProductions.push('<ParameterList> ::= <Expr> <ParameterList_>');"]
                            ],
        "ParameterList_":   [
                                ["", "ParsedProductions.push('<ParameterList_> ::= epsilon');"],
                                [", Expr ParameterList_", "ParsedProductions.push('<ParameterList_> ::= <Expr> <ParameterList_>');"]
                            ],
    }
}