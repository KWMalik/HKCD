{   
    "lex": {
        "macros": {
            "Letter": "[a-zA-Z]",
            "Digit" : "[0-9]",
            "NonZeroDigit" : "[1-9]",
        },
        
        "rules": [
            ["/\\*(.|\\n|\\r|\\r\\n)*?\\*/", "/* skip */"],
            ["//.*", "/* skip */"],
            ["\\s+", "/* skip */"],
            ["class\\b", "return 'class';"],
            ["public\\b", "return 'public';"],
            ["static\\b", "return 'static';"],
            ["void\\b", "return 'void';"],
            ["main\\b", "return 'main';"],
            ["String\\b", "return 'String';"],
            ["extends\\b", "return 'extends';"],
            ["int\\b", "return 'int';"],
            ["boolean\\b", "return 'boolean';"],
            ["return\\b", "return 'return';"],
            ["if\\b", "return 'if';"],
            ["else\\b", "return 'else';"],
            ["while\\b", "return 'while';"],
            ["true\\b", "return 'true';"],
            ["System\\.out\\.println\\b", "return 'printLine';"],
            ["new\\b", "return 'new';"],
            ["null\\b", "return 'null';"],
            ["false\\b", "return 'false';"],
            ["this\\b", "return 'this';"],
            ["{Letter}({Letter}|{Digit})*", "return 'ID';"],
            ["({NonZeroDigit}{Digit}*|0)", "return 'Integer';"],
            ["\\!=", "return '!=';"],
            ["\\!", "return '!';"],
            ["-", "return '-';"],
            ["\\+", "return '+';"],
            ["\\*", "return '*';"],
            ["&&", "return '&&';"],
            ["\\/", "return '/';"],
            [">=", "return '>=';"],
            [">", "return '>';"],
            ["<=", "return '<=';"],
            ["<", "return '<';"],
            ["==", "return '==';"],
            ["\\|\\|", "return '||';"],
            ["\\{", "return '{';"],
            ["\\}", "return '}';"],
            ["\\[", "return '[';"],
            ["\\]", "return ']';"],
            ["\\(", "return '(';"],
            ["\\)", "return ')';"],
            ["\\.", "return '.';"],
            [";", "return ';';"],
            [",", "return ',';"],
            ["=", "return '=';"],
        ]
    },
    
    "operators": [
        ["right", "="],
        ["left", "||"],
        ["left", "&&"],
        ["nonassoc", "==", "!="],
        ["left", "<", "<=", ">", ">="],
        ["left", "+", "-"],
        ["left", "*", "/"],
        ["right", "!", "UMINUS", "."],
    ],

    "bnf": { 
        "Program":          [
                                ["MainClassDecl ClassDeclList", "print('<Program> ::= <MainClassDecl> <ClassDeclList>');"]
                            ],
        "MainClassDecl":    [
                                ["class ID { public static void main ( String [ ] ID ) { StmtList } }", "print('<MainClassDecl> ::= class ID { public static void main ( String [ ] ID ) { <StmtList> } }');"]
                            ],
        "ClassDeclList":    [
                                ["", "print('<ClassDeclList> ::= epsilon');"],
                                ["ClassDecl ClassDeclList", "print('<ClassDeclList> ::= <ClassDecl> <ClassDeclList>');"]
                            ],
        "ClassDecl":        [
                                ["class ID Extension { ClassVarDeclList MethodDeclList }", "print('<ClassDecl> ::= class ID <Extension> { <ClassVarDeclList> <MethodDeclList> }');"]
                            ],
        "Extension":        [
                                ["", "print('<Extension> ::= epsilon');"],
                                ["extends ID", "print('<Extension> ::= extends ID');"]
                            ],
        "ClassVarDeclList": [
                                ["", "print('<ClassVarDeclList> ::= epsilon');"],
                                ["ClassVarDecl ClassVarDeclList", "print('<ClassVarDeclList> ::= <ClassVarDecl> <ClassVarDeclList>');"]
                            ],
        "ClassVarDecl":     [
                                ["Type ID ;", "print('<ClassVarDecl> ::= <Type> ID');"]
                            ],
        "MethodDeclList":   [
                                ["", "print('<MethodDeclList> ::= epsilon');"],
                                ["MethodDecl MethodDeclList", "print('<MethodDeclList> ::= <MethodDecl> <MethodDeclList>');"]
                            ],
        "MethodDecl":       [
                                ["public Type ID ( FormalList ) { StmtList return Expr ; }", "print('<MethodDecl> ::= public <Type> ID ( <FormalList> ) { <StmtList> return <Expr> ; }');"]
                            ],
        "FormalList":       [
                                ["", "print('<FormalList> ::= epsilon');"],
                                ["Formal FormalList_", "print('<FormalList> ::= <Formal> <FormalList_>');"]
                            ],
        "FormalList_":      [
                                ["", "print('<FormalList_> ::= epsilon');"],
                                [", Formal FormalList_", "print('<FormalList_> ::= , <Formal> <FormalList_>');"]
                            ],
        "Formal":           [
                                ["Type ID", "print('<Formal> ::= <Type> ID');"]
                            ],
        "Type":             [
                                ["int", "print('<Type> ::= int');"],
                                ["boolean", "print('<Type> ::= boolean');"],
                                ["ID", "print('<Type> ::= ID');"]
                            ],
        "StmtList":         [
                                ["", "print('<StmtList> ::= epsilon');"],
                                ["Stmt StmtList", "print('<StmtList> ::= <Stmt> <StmtList>');"]
                            ],
        "Stmt":             [
                                ["Type ID = Expr ;", "print('<Stmt> ::= <Type> ID = <Expr> ;');"],
                                ["{ StmtList }", "print('<Stmt> ::= { <StmtList> }');"],
                                ["if ( Expr ) Stmt else Stmt", "print('<Stmt> ::= if ( <Expr> ) <Stmt> else <Stmt>');"],
                                ["while ( Expr ) Stmt", "print('<Stmt> ::= while ( <Expr> ) <Stmt>');"],
                                ["printLine ( Expr ) ;", "print('<Stmt> ::= ' + $1 + ' ( <Expr> )');"],
                                ["ID = Expr ;", "print('<Stmt> ::= ID = <Expr>');"]
                            ],
        "Expr":             [
                                ["Expr + Expr", "print('<Expr> ::= <Expr> + <Expr>');"],
                                ["Expr - Expr", "print('<Expr> ::= <Expr> - <Expr>');"],
                                ["Expr * Expr", "print('<Expr> ::= <Expr> * <Expr>');"],
                                ["Expr / Expr", "print('<Expr> ::= <Expr> / <Expr>');"],
                                ["Expr < Expr", "print('<Expr> ::= <Expr> < <Expr>');"],
                                ["Expr <= Expr", "print('<Expr> ::= <Expr> <= <Expr>');"],
                                ["Expr >= Expr", "print('<Expr> ::= <Expr> >= <Expr>');"],
                                ["Expr > Expr", "print('<Expr> ::= <Expr> > <Expr>');"],
                                ["Expr == Expr", "print('<Expr> ::= <Expr> == <Expr>');"],
                                ["Expr != Expr", "print('<Expr> ::= <Expr> != <Expr>');"],
                                ["Expr && Expr", "print('<Expr> ::= <Expr> && <Expr>');"],
                                ["Expr || Expr", "print('<Expr> ::= <Expr> || <Expr>');"],
                                ["! Expr", "print('<Expr> ::= ! <Expr>');"],
                                ["- Expr", "print('<Expr> ::= - <Expr>');", {"prec": "UMINUS"}],
                                ["Expr . ID ( ParameterList )", "print('<Expr> ::= <Expr> . ID ( <ParameterList> )');"],
                                ["new ID ( )", "print('<Expr> ::= new ID ( )');"],
                                ["ID", "print('<Expr> ::= ID');"],
                                ["this", "print('<Expr> ::= this');"],
                                ["Integer", "print('<Expr> ::= Integer');"],
                                ["null", "print('<Expr> ::= null');"],
                                ["true", "print('<Expr> ::= true');"],
                                ["false", "print('<Expr> ::= false');"], 
                                ["( Expr )", "print('<Expr> ::= ( <Expr> )');"]
                            ],
        "ParameterList":    [
                                ["", "print('<ParameterList> ::= epsilon');"],
                                ["Expr ParameterList_", "print('<ParameterList> ::= <Expr> <ParameterList_>');"]
                            ],
        "ParameterList_":   [
                                ["", "print('<ParameterList_> ::= epsilon');"],
                                [", Expr ParameterList_", "print('<ParameterList_> ::= <Expr> <ParameterList_>');"]
                            ],
    }
}