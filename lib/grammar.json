{   
    "lex": {
        "macros": {
            "Letter": "[a-zA-Z]",
            "Digit" : "[0-9]",
            "NonZeroDigit" : "[1-9]",
        },
        
        "rules": [
            ["/\\*(.|\\n|\\r|\\r\\n)*?\\*/", "/* skip */"],
            ["//.*", "/* skip */"],
            ["\\s+", "/* skip */"],
            ["class\\b", "return 'class';"],
            ["public\\b", "return 'public';"],
            ["static\\b", "return 'static';"],
            ["void\\b", "return 'void';"],
            ["main\\b", "return 'main';"],
            ["String\\b", "return 'String';"],
            ["extends\\b", "return 'extends';"],
            ["int\\b", "return 'int';"],
            ["boolean\\b", "return 'boolean';"],
            ["return\\b", "return 'return';"],
            ["if\\b", "return 'if';"],
            ["else\\b", "return 'else';"],
            ["(while|null|true|false|this|new|System\\.out\\.println)\\b", "return 'ReservedWord';"],
            ["{Letter}({Letter}|{Digit})*", "return 'ID';"],
            ["({NonZeroDigit}{Digit}*|0)", "return 'Integer';"],
            ["(\\+|-|\\*|\\/|<=|<|>=|>|==|\\!=|&&|\\|\\||\\!)", "return 'Operator';"],
            ["\\{", "return '{';"],
            ["\\}", "return '}';"],
            ["\\[", "return '[';"],
            ["\\]", "return ']';"],
            ["\\(", "return '(';"],
            ["\\)", "return ')';"],
            ["\\.", "return '.';"],
            [";", "return ';';"],
            [",", "return ',';"],
            ["=", "return '=';"],
        ]
    },

    "bnf": { 
        "Program": ["MainClassDecl Program_"],
        "Program_": ["ClassDecl Program_", ""],
        "MainClassDecl": ["class ID { public static void main ( String [ ] ID ) { } }"],
        "ClassDecl": ["class ID ClassDecl_ { ClassVarDecl MethodDecl }"],
        "ClassDecl_": ["extends ID", ""],
        "ClassVarDecl": ["Type ID ; ClassVarDecl", ""],
        "MethodDecl": ["public Type ID ( FormalList ) { Stmt return ID ; } MethodDecl", ""],
        "FormalList": ["", "Formal FormalList_"],
        "FormalList_": [", Formal FormalList_", ""],
        "Formal": ["Type ID"],
        "Type": ["int", "boolean", "ID"],
        "Stmt": ["Type ID = Expr ; Stmt", "if ( Expr ) Stmt else Stmt", "{ Stmt }", "ID = Expr ;", ""],
        "Expr": ["Integer", "ID", "ID Operator Integer"],
    }
}