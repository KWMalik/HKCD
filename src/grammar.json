{   
    "lex": {
        "macros": {
            "Letter": "[a-zA-Z]",
            "Digit" : "[0-9]",
            "NonZeroDigit" : "[1-9]",
        },
        
        "rules": [
            ["/\\*(.|\\n|\\r|\\r\\n)*?\\*/",    "/* skip */"],
            ["//.*",                            "/* skip */"],
            ["\\s+",                            "/* skip */"],
            ["(class|public|static|void|main|String|extends|int|boolean|Function|return|if|else|while|true|new|null|false|this)\\b", "return yytext;"],
            ["System\\.out\\.println\\b",       "return 'printLine';"],
            ["{Letter}({Letter}|{Digit})*",     "return 'ID';"],
            ["({NonZeroDigit}{Digit}*|0)",      "return 'Integer';"],
            ["(\\!=|\\!|-|\\+|\\*|&&|\\/|>=|>|<=|<|==|\\|\\||\\{|\\}|\\[|\\]|\\(|\\)|\\.|;|,|=|\\|)", "return yytext;"],
        ]
    },
    
    "operators": [
        ["right", "="],
        ["left", "||"],
        ["left", "&&"],
        ["nonassoc", "==", "!="],
        ["left", "<", "<=", ">", ">="],
        ["left", "+", "-"],
        ["left", "*", "/"],
        ["right", "!", "UMINUS", "."],
    ],

    "bnf": { 
        "Program":          [
                                ["MainClassDecl ClassDeclList", "$$ = new yy.ASTNode('Program', [$1].concat($2), { 'lineNumber': yylineno }); return $$;"],
                            ],
        "MainClassDecl":    [
                                ["class JavaID { MainMethodDecl }", "$$ = new yy.ASTNode('MainClassDecl', [].concat($4), { 'className': $2, 'param': $12, 'superClassName': null, 'lineNumber': yylineno });"],
                            ],
        "ClassDeclList":    [
                                ["", "$$ = [];"],
                                ["ClassDecl ClassDeclList", "$2.unshift($1); $$ = $2;"],
                            ],
        "ClassDecl":        [
                                ["class JavaID Extension { ClassVarDeclList MethodDeclList }", "$$ = new yy.ASTNode('ClassDecl', [].concat($5, $6), { 'className': $2, 'superClassName': $3, 'lineNumber': yylineno });"],
                            ],
        "Extension":        [
                                ["", "$$ = null;"],
                                ["extends JavaID", "$$ = $2;"],
                            ],
        "ClassVarDeclList": [
                                ["", "$$ = [];"],
                                ["ClassVarDecl ClassVarDeclList", "$2.unshift($1); $$ = $2;"],
                            ],
        "ClassVarDecl":     [
                                ["Type JavaID ;", "$$ = new yy.ASTNode('ClassVarDecl', [], { 'type': $1, 'fieldName': $2, 'lineNumber': yylineno });"],
                            ],
        "MethodDeclList":   [
                                ["", "$$ = [];"],
                                ["MethodDecl MethodDeclList", "$2.unshift($1); $$ = $2;"],
                            ],
        "MainMethodDecl":   [
                                ["public static void main ( String [ ] JavaID ) { StmtList }", "$$ = new yy.ASTNode('MainMethodDecl', [].concat($12), { 'returnExpression': null, 'returnType': 'void', 'methodName': 'main', 'lineNumber': yylineno });"],
                            ],
        "MethodDecl":       [
                                ["public Type JavaID ( FormalList ) { StmtList ReturnStmt }", "$$ = new yy.ASTNode('MethodDecl', $5.concat($8).concat([$9]), { 'returnExpression': $9, 'returnType': $2, 'methodName': $3, 'lineNumber': yylineno });"],
                            ],
        "FormalList":       [
                                ["", "$$ = [];"],
                                ["Formal FormalList_", "$2.unshift($1); $$ = $2;"],
                            ],
        "FormalList_":      [
                                ["", "$$ = [];"],
                                [", Formal FormalList_", "$3.unshift($2); $$ = $3;"],
                            ],
        "Formal":           [
                                ["Type JavaID", "$$ = new yy.ASTNode('Formal', [], { 'type': $1, 'parameterName': $2, 'lineNumber': yylineno });"],
                            ],
        "Type":             [
                                ["int", "$$ = yytext;"],
                                ["boolean", "$$ = yytext;"],
                                ["Function", "$$ = yytext;"],
                                ["ID", "$$ = yytext;"],
                            ],
        "StmtList":         [
                                ["", "$$ = [];"],
                                ["Stmt StmtList", "$2.unshift($1); $$ = $2;"],
                            ],
        "ReturnStmt":       [
                                ["return Expr ;", "$$ = new yy.ASTNode('ReturnExpression', [], { 'lineNumber': yylineno, 'expression': $2 });"],
                            ],
        "Stmt":             [
                                ["Type JavaID = Expr ;", "$4.varName = $2; $$ = new yy.ASTNode('InitialAssignment', [], { 'type': $1, 'varName': $2, 'value': $4, 'lineNumber': yylineno });"],
                                ["{ StmtList }", "$$ = new yy.ASTNode('Block', [].concat($2), { 'lineNumber': yylineno });"],
                                ["if ( Expr ) Stmt else Stmt", "$$ = new yy.ASTNode('If', [$5, $7], { 'condition': $3, 'lineNumber': yylineno });"],
                                ["while ( Expr ) Stmt", "$$ = new yy.ASTNode('While', [$5], { 'condition': $3, 'lineNumber': yylineno });"],
                                ["printLine ( Expr ) ;", "$$ = new yy.ASTNode('PrintLine', [], { 'value': $3, 'lineNumber': yylineno });"],
                                ["ID = Expr ;", "$$ = new yy.ASTNode('Assignment', [], { 'varName': $1, 'value': $3, 'lineNumber': yylineno });"],
                            ],
        "Expr":             [
                                ["Expr + Expr", "$$ = new yy.ASTNode('AddExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr - Expr", "$$ = new yy.ASTNode('SubtractExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr * Expr", "$$ = new yy.ASTNode('MultiplyExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr / Expr", "$$ = new yy.ASTNode('DivideExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr < Expr", "$$ = new yy.ASTNode('LessThanExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr <= Expr", "$$ = new yy.ASTNode('LessThanEqualExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr >= Expr", "$$ = new yy.ASTNode('GreaterThanEqualExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr > Expr", "$$ = new yy.ASTNode('GreaterThanExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr == Expr", "$$ = new yy.ASTNode('EqualExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr != Expr", "$$ = new yy.ASTNode('NotEqualExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr && Expr", "$$ = new yy.ASTNode('AndExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["Expr || Expr", "$$ = new yy.ASTNode('OrExpression', [$1, $3], { 'lineNumber': yylineno });"],
                                ["! Expr", "$$ = new yy.ASTNode('NotExpression', [$2], { 'lineNumber': yylineno });"],
                                ["- Expr", "$$ = new yy.ASTNode('NegateExpression', [$2], { 'lineNumber': yylineno });", {"prec": "UMINUS"}],
                                ["Expr . JavaID ( ParameterList )", "$$ = new yy.ASTNode('CallExpression', [$1, $5], {'methodCallName': $3, 'lineNumber': yylineno});"],
                                ["new JavaID ( )", "$$ = new yy.ASTNode('ConstructExpression', [], {'className':$2, 'lineNumber': yylineno});"],
                                ["IDExpression", "$$ = $1;"],
                                ["this", "$$ = new yy.ASTNode('ThisExpression', [], { 'lineNumber': yylineno });"],
                                ["Integer", "$$ = new yy.ASTNode('IntegerExpression', [], {'expression':yytext, 'lineNumber': yylineno});"],
                                ["null", "$$ = new yy.ASTNode('NullExpression', [], { 'lineNumber': yylineno });"],
                                ["true", "$$ = new yy.ASTNode('TrueExpression', [], { 'lineNumber': yylineno });"],
                                ["false", "$$ = new yy.ASTNode('FalseExpression', [], { 'lineNumber': yylineno });"], 
                                ["( Expr )", "$$ = $2;"],
                                ["Closure", "$$ = $1;"],
                                ["IDExpression ( ParameterList )", "$$ = new yy.ASTNode('ClosureCallExpression', [$1, $3], { 'lineNumber': yylineno })"],
                            ],
        "IDExpression":     [
                                ["ID", "$$ = new yy.ASTNode('IDExpression', [], { 'value': yytext, 'lineNumber': yylineno });"],
                            ],
        "Closure":          [
                                ["{ FormalList | StmtList ReturnStmt }", "$$ = new yy.ASTNode('ClosureExpression', $2.concat($4).concat([$5]), { 'returnExpression': $5, 'lineNumber': yylineno });"],
                            ],
        "ParameterList":    [
                                ["", "$$ = [];"],
                                ["Expr ParameterList_", "$2.unshift($1); $$ = $2;"],
                            ],
        "ParameterList_":   [
                                ["", "$$ = [];"],
                                [", Expr ParameterList_", "$3.unshift($2); $$ = $3;"],
                            ],
        "JavaID":           [
                                ["ID", "$$ = yytext"],
                            ],
    }
}